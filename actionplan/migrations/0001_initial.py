# Generated by Django 3.2.7 on 2021-09-27 18:03

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Mentor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, unique=True)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('current_portfolio', models.URLField()),
                ('linkedIn_ID', models.URLField()),
                ('work_timeline', models.CharField(max_length=500)),
                ('description', models.TextField(blank=True, max_length=500, verbose_name='description')),
                ('phonenumber_permissions', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=200)),
                ('sectors_selection', models.CharField(choices=[('Women Empowerment', 'Women Empowerment'), ('Education and Employability', 'Education and Employability'), ('Education', 'Education'), ('Agriculture and Livestock', 'Agriculture and Livestock'), ('Heathcare', 'Heathcare'), ('5R-Reuse, Reduce,Recycle,Recover,Refuse', '5R-Reuse, Reduce,Recycle,Recover,Refuse'), ('Sustainable Energy', ' Sustainable Energy'), ('Pollution', 'Pollution'), ('Financial Inclusion and Fintech', 'Financial Inclusion and Fintech'), ('Water management', 'Water management')], max_length=200)),
                ('mentor_type', models.CharField(choices=[('BUSINESS MENTOR', 'BUSINESS MENTOR'), ('TECHNICAL MENTOR', 'TECHNICAL MENTOR'), ('BOTH', 'BOTH')], max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('team_name', models.CharField(max_length=100)),
                ('team_leader_name', models.CharField(max_length=100)),
                ('team_leader_emailID', models.EmailField(max_length=100, unique=True)),
                ('team_leader_phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, unique=True)),
                ('phone_number_alternate', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, unique=True)),
                ('name_of_organisation', models.CharField(max_length=200)),
                ('is_startup', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=20)),
                ('city_name', models.CharField(max_length=100)),
                ('team_member2_name', models.CharField(max_length=100)),
                ('team_member3_name', models.CharField(max_length=100)),
                ('team_member4_name', models.CharField(max_length=100)),
                ('team_member5_name', models.CharField(max_length=100)),
                ('team_member6_name', models.CharField(max_length=100)),
                ('team_member7_name', models.CharField(max_length=100)),
                ('team_member8_name', models.CharField(max_length=100)),
                ('sectors_selection', models.CharField(choices=[('Health', 'Health'), ('Women Empowerment', 'Women Empowerment'), ('Pollution', 'Pollution'), ('Education', 'Education'), ('Employability', 'Employability'), ('Agriculture and Farming', 'Agriculture and Farming'), ('5R-Reuse, Reduce,Recycle,Recover,Refuse', '5R-Reuse, Reduce,Recycle,Recover,Refuse'), ('Sustainable Energy', ' Sustainable Energy'), ('Financial Inclusion and Fintech', 'Financial Inclusion and Fintech'), ('Water management', 'Water management'), ('Security', 'Security'), ('Rural development', 'Rural development')], max_length=200)),
                ('alternate_member_details_name', models.CharField(max_length=100)),
                ('alternate_member_details_email', models.EmailField(max_length=100)),
                ('referral_code', models.CharField(max_length=200)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
